"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  PinoLogger: () => PinoLogger,
  getLogger: () => getLogger,
  logger: () => logger
});
module.exports = __toCommonJS(src_exports);

// src/middleware.ts
var import_factory = require("hono/factory");
var import_pino = require("pino");
var import_defu = require("defu");

// src/utils.ts
function getLogger(c) {
  return c.get("logger");
}
function isPino(value) {
  return typeof value === "object" && value !== null && "child" in value && typeof value.child === "function";
}

// src/logger.ts
var PinoLogger = class {
  #rootLogger;
  logger;
  constructor(rootLogger) {
    this.#rootLogger = rootLogger.child({});
    this.logger = rootLogger;
  }
  /**
   * assign bindings to http log context
   */
  assign(bindings) {
    this.logger = this.#rootLogger.child({
      ...this.logger.bindings(),
      ...bindings
    });
  }
};
PinoLogger.prototype.trace = function(...args) {
  this.logger.trace(...args);
};
PinoLogger.prototype.debug = function(...args) {
  this.logger.debug(...args);
};
PinoLogger.prototype.info = function(...args) {
  this.logger.info(...args);
};
PinoLogger.prototype.warn = function(...args) {
  this.logger.warn(...args);
};
PinoLogger.prototype.error = function(...args) {
  this.logger.error(...args);
};
PinoLogger.prototype.fatal = function(...args) {
  this.logger.fatal(...args);
};

// src/middleware.ts
var logger = (opts) => {
  const rootLogger = isPino(opts?.pino) ? opts.pino : (0, import_pino.pino)(opts?.pino);
  const contextKey = opts?.contextKey ?? "logger";
  return (0, import_factory.createMiddleware)(async (c, next) => {
    const logger2 = new PinoLogger(rootLogger);
    c.set(contextKey, logger2);
    if (opts?.http === false) {
      await next();
      return;
    }
    let bindings = opts?.http?.onReqBindings?.(c) ?? {
      req: {
        url: c.req.path,
        method: c.req.method,
        headers: c.req.header()
      }
    };
    if (opts?.http?.reqId !== false) {
      bindings.reqId = opts?.http?.reqId?.() ?? defaultReqIdGenerator();
    }
    if (opts?.http?.onReqMessage) {
      const level = opts.http.onReqLevel?.(c) ?? "info";
      const msg = opts.http.onReqMessage(c);
      logger2[level](bindings, msg);
    }
    if (opts?.http?.responseTime ?? true) {
      const startTime = performance.now();
      await next();
      const endTime = performance.now();
      const responseTime = Math.round(endTime - startTime);
      bindings.responseTime = responseTime;
    } else {
      await next();
    }
    if (opts?.http?.onResMessage !== false) {
      const onResBindings = opts?.http?.onResBindings?.(c) ?? {
        res: {
          status: c.res.status,
          headers: c.res.headers
        }
      };
      bindings = (0, import_defu.defu)(bindings, onResBindings);
      const level = opts?.http?.onResLevel?.(c) ?? (c.error ? "error" : "info");
      const msg = opts?.http?.onResMessage?.(c) ?? (c.error ? c.error.message : "Request completed");
      logger2[level](bindings, msg);
    }
  });
};
var defaultReqId = 0n;
var defaultReqIdGenerator = () => defaultReqId += 1n;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  PinoLogger,
  getLogger,
  logger
});
